/* ---------------------------------
createTag
--------------------------------- */

import { call, put, select, takeEvery } from "redux-saga/effects";
import {
  createTag,
  createTagError,
  createTagPending,
  createTagSuccess,
} from "../store/actions";
import { db } from "../mocks";
import { IInitialState } from "../types/initial-state";
import { TTagBundle } from "../types/bookman";

function* createTagSaga(action) {
  const { payload: tags } = action;
  const authSelector = (state: IInitialState) => state.authentication;
  const {
    user: { uid },
  } = yield select(authSelector);

  yield put(createTagPending());

  try {
    const context = db.ref();

    // we build the update payload
    const updates = (tags as TTagBundle).reduce((acc, tag) => {
      const newTagRef = db.ref("/tags").push().key;

      if (!newTagRef) {
        throw new Error("Missing FireBase key!");
      }

      acc[`/tags/${newTagRef}`] = {
        ...tag,
        createdBy: uid,
      };
      acc[`/users/${uid}/tags/${newTagRef}`] = true;

      return acc;
    }, {});

    // we create the bookmark remotely
    yield call(
      {
        context,
        fn: context.update,
      },

      updates
    );

    // this is the key generated by firebase
    yield put(createTagSuccess(updates));

    // yield put(
    //   showNotif({
    //     message: `Created new tag!`,
    //     icon: "star",
    //     timeOut: 2000,
    //     theme: "light",
    //   })
    // );

    //
  } catch (error) {
    //
    console.error(error);
    yield put(createTagError({ error }));
  }
}

/**
 * createTag
 */

export default function* () {
  yield takeEvery(`${createTag}`, createTagSaga);
}
