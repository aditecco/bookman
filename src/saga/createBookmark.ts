/* ---------------------------------
createBookmark
--------------------------------- */

import { call, put, takeEvery, select } from "redux-saga/effects";
import {
  showNotif,
  createBookmark,
  createBookmarkPending,
  createBookmarkError,
  createBookmarkSuccess,
} from "../redux/actions";
import { db } from "../index";
import { IInitialState } from "../redux/initialState";

function* createBookmarkSaga(action) {
  const { payload } = action;

  const authSelector = (state: IInitialState) => state.authentication;

  const {
    user: { uid },
  } = yield select(authSelector);

  yield put(createBookmarkPending());

  try {
    const context = db.ref();
    const newBookmarkRef = db.ref("/bookmarks").push().key;

    if (!newBookmarkRef) {
      throw new Error("Missing FireBase key!");
    }

    const updates = {
      [`/bookmarks/${newBookmarkRef}`]: payload,
      [`/users/${uid}/bookmarks/${newBookmarkRef}`]: true,
    };

    // we create the bookmark remotely
    yield call(
      {
        context,
        fn: context.update,
      },

      updates
    );

    // this is the key generated by firebase
    yield put(createBookmarkSuccess({ key: newBookmarkRef }));

    yield put(
      showNotif({
        message: `Created new bookmark!`,
        icon: "star",
        timeOut: 2000,
        theme: "light",
      })
    );

    //
  } catch (error) {
    //
    console.error(error);
    yield put(createBookmarkError({ error }));
  }
}

/**
 * createBookmark
 */

export default function* () {
  yield takeEvery(`${createBookmark}`, createBookmarkSaga);
}
