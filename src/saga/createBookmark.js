/* ---------------------------------
createBookmark
--------------------------------- */

import { call, put, takeEvery, select } from "redux-saga/effects";
import {
  showNotif,
  createBookmark,
  createBookmarkPending,
  createBookmarkError,
  createBookmarkSuccess,
} from "../redux/actions";
import { db } from "../index";

function* createBookmarkSaga(action) {
  const { payload } = action;

  const authSelector = state => state.authentication;

  // TODO after initializing a user,
  // mark the created item in his/her
  // bookmarks address

  const {
    user: { uid },
  } = yield select(authSelector);

  yield put(createBookmarkPending());

  try {
    const context = db.ref("/bookmarks");

    const bookmarkRef = yield call(
      {
        context,
        fn: context.push,
      },

      payload
    );

    if (!bookmarkRef.key) {
      throw new Error("Missing FireBase key!");
    }

    // this is the key generated by firebase
    yield put(createBookmarkSuccess(bookmarkRef.key));

    yield put(
      showNotif({
        message: `Created new bookmark!`,
        icon: "star",
        timeOut: 2000,
        theme: "light",
      })
    );

    //
  } catch (error) {
    //
    console.error(error);
    yield put(createBookmarkError({ error }));
  }
}

/**
 * createBookmark
 */

export default function* () {
  yield takeEvery(`${createBookmark}`, createBookmarkSaga);
}
